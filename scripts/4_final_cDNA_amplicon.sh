#!/bin/bash

## ---------------------------------------

## this script processes all allele files generated by the previous rule (allele_typing), including those coming from different donors or samples 
## the goal is to concatenate all typed alleles and their sequences from all files
## and append those into the original cDNA file for quantification

## main input:
## - directory containing allele files (referred to in this script as alleles_dir="$1")
## - file with gene names used to filter out existing HLA sequences (referred to in this script as gene_names="$2")
##   before adding the sequences of the HLA typed alleles into the original cDNA file, the HLA sequences already present must be removed
## - original cDNA file containing the panel reference used after processing (referred to in this script as cDNA_RNA="$3")
## - output file for combined cDNA sequences (referred to in this script as output_cDNA="$4")
## - output file for the lookup table (referred to in this script as output_lookup_table="$5")

## this script concatenates typed alleles from all input files and removes duplicates
## HLA sequences are formatted by appending AV and a count of occurrences, such as HLA-A-AV-1, HLA-A-AV-2, HLA-A-AV-3 (AV refers to Allelic Variant)
## sequences in "$cDNA_RNA" are filtered based on specified gene names in "$gene_names"
## the filtered cDNA and formatted HLA sequences are combined into a final output file ("$output_cDNA")
## in addition, an HLA lookup table is created, mapping each allele to its corresponding gene and functional class
## this table is crucial for constructing the data structure used in downstream analyses

## ---------------------------------------

## input data
alleles_dir="$1"
gene_names="$2"
cDNA_RNA="$3"
output_cDNA="$4"
output_lookup_table="$5"

## concatenates the typed alleles from all allele files in the specified directory (generated by rule allele_typing)
## when demultiplexing is true, there are multiple allele files, one file per donor or sample, otherwise, only one file
## looks for lines starting with '>' to identify headers and gathers subsequent typed alleles until it hits a separator line (----------------------)
## removes any duplicate lines from the combined output
conc_alleles=$(awk '
    /^>/ {
        if (header != "") {
            headers[header] = headers[header] typed_alleles
        }
        header = $0
        typed_alleles = ""
        next
    }
    /^Typed alleles:/ {
        getline
        while (!/^----------------------$/) {
            if (/^[[:space:]]*[0-9]+/) {
                sub(/^[[:space:]]*[0-9]+[[:space:]]*/, "")
            }
            typed_alleles = typed_alleles $0 "\n"
            getline
        }
    }
    END {
        if (header != "") {
            headers[header] = headers[header] typed_alleles
        }
        for (header in headers) {
            printf("%s\n%s", header, headers[header])
        }
    }
' "$alleles_dir"/alleles* | awk '!seen[$0]++')

## formats the headers of the HLA sequences
## HLA sequences are formatted by appending AV and a count of occurrences
cDNA_HLA=$(echo "$conc_alleles" | awk '/^>/{if (header != "") sequences=0; header=$0; sub(/\|.*/, "", header); next} {sequences++; print header "-AV-" sequences; print}')

## filters the original cDNA file to remove sequences based on the gene names provided
## the HLA sequences already present must be removed
## before the newly typed allele sequences can be appended
cDNA_RNA_filtered=$(awk '(NR==FNR) { toRemove[$1]; next }
    /^>/ { p=1; for(h in toRemove) if ( h ~ $0) p=0 }
    p' "$gene_names" "$cDNA_RNA")

echo -e -n "${cDNA_RNA_filtered}\n${cDNA_HLA}" > "$output_cDNA"

## creates an HLA lookup table, mapping each allele to its corresponding gene and functional class
echo "Allele,Gene,Function" > "$output_lookup_table" && echo "$cDNA_HLA" | awk '/^>/ { header=substr($0,2); gene=substr(header,1,index(header,"-AV-")-1); print header "," gene }' | awk -F, 'BEGIN {OFS=","} NR>0 {if ($2=="HLA-A" || $2=="HLA-B" || $2=="HLA-C") $3="HLA_class_I"; else if ($2=="HLA-DRA" || $2=="HLA-DRB1" || $2=="HLA-DRB3" || $2=="HLA-DRB5" || $2=="HLA-DQA1" || $2=="HLA-DQB1" || $2=="HLA-DPA1" || $2=="HLA-DPB1") $3="HLA_class_II"; else if ($2=="HLA-E" || $2=="HLA-F" || $2=="HLA-G" || $2=="HLA-DMA" || $2=="HLA-DMB" || $2=="HLA-DOA" || $2=="HLA-DOB") $3="HLA_non_classical"; else if ($2=="HLA-H" || $2=="HLA-J" || $2=="HLA-K" || $2=="HLA-L") $3="HLA_non_coding"} 1' >> "$output_lookup_table"